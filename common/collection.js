// Generated by CoffeeScript 1.9.2

/**
 * all rules gather together to be a collection
 */
(function(root, factory) {
  if (typeof define === 'function' && (define.amd || define.cmd)) {
    define(function() {
      return factory(root);
    });
  } else if (typeof exports === 'object') {
    module.exports = factory(root);
  } else {
    root.collection = factory(root);
  }
})(this, function(root) {
  var addRule, cats, collection, eachRule, getRules, hasCat, indexOfRule, initCollection, removeRule, saveRule;
  collection = {};
  cats = ['block', 'hsts', 'hotlink', 'log'];
  hasCat = function(cat) {
    return ~cats.indexOf(cat);
  };
  getRules = function(cat) {
    var rules;
    rules = collection[cat];
    return rules.filter(function(rule) {
      return rule !== void 0;
    });
  };
  initCollection = function() {
    var cat, i, len;
    cats = ['block', 'hsts', 'hotlink', 'log'];
    for (i = 0, len = cats.length; i < len; i++) {
      cat = cats[i];
      collection[cat] = JSON.parse(localStorage.getItem(cat) || '[]');
    }
  };
  indexOfRule = function(cat, rule) {
    var rules;
    rules = collection[cat];
    if (!(rules && rule)) {
      return -1;
    }
    return rules.indexOf(rule);
  };
  addRule = function(cat, rule) {
    var rules;
    if (!rule || ~indexOfRule(cat, rule)) {
      return false;
    }
    rules = collection[cat];
    rules[rules.length++] = rule;
    saveRule(cat);
    return true;
  };
  removeRule = function(cat, rules) {
    var _rules;
    _rules = getRules(cat);
    if (rule === void 0 || (Array.isArray(rules) && _rules.length === rules.length)) {
      collection[cat] = [];
    } else {
      if (!Array.isArray(rules)) {
        rules = [rules];
      }
      rules.forEach(function(rule) {
        var index;
        index = indexOfRule(cat, rule);
        if (~index) {
          _rules[index] = void 0;
        }
      });
    }
    saveRule(cat);
  };
  saveRule = function(cat) {
    var arr;
    arr = getRules(cat);
    localStorage.setItem(cat, JSON.stringify(arr));
  };
  eachRule = function(cat, fn, context) {
    var rules;
    rules = collection[cat];
    if (!rules) {
      return;
    }
    rules.forEach(function(rule) {
      if (rule !== void 0) {
        fn.call(context, rule);
      }
    });
  };
  initCollection();
  return {
    _collection: collection,
    indexOfRule: indexOfRule,
    hasCat: hasCat,
    addRule: addRule,
    getRules: getRules,
    removeRule: removeRule,
    saveRule: saveRule,
    eachRule: eachRule
  };
});


//# sourceMappingURL=collection.js.map
