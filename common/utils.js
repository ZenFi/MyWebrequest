// Generated by CoffeeScript 1.9.2
var hasProp = {}.hasOwnProperty;

(function(root, factory) {
  if (typeof define === 'function' && (define.amd || define.cmd)) {
    define(function() {
      return factory(root);
    });
  } else if (typeof exports === 'object') {
    module.exports = factory(root);
  } else {
    root.utils = factory(root);
  }
})(this, function(root) {
  var getLocal, getSwitch, hostReg, ipReg, isValidHost, isValidIp, isValidPath, isValueInObj, pathReg, setSwitch;
  isValueInObj = function(obj, val) {
    var k, v;
    for (k in obj) {
      if (!hasProp.call(obj, k)) continue;
      v = obj[k];
      if (v === val) {
        return true;
      }
    }
    return false;
  };
  ipReg = /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/;
  isValidIp = function(ip) {
    return ipReg.test(ip);
  };
  hostReg = /^(\*((\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*\.[a-z]{2,4})?|([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,4})$/;
  isValidHost = function(host) {
    return hostReg.test(host);
  };
  pathReg = /^[a-z0-9-_\+=&%@!\.,\*\?\|~\/]+$/i;
  isValidPath = function(path) {
    return pathReg.test(path);
  };
  getSwitch = function(cat) {
    var onoff;
    onoff = JSON.parse(localStorage.getItem('onoff') || '{}');
    return !!onoff[cat];
  };
  setSwitch = function(cat, isOn) {
    var onoff;
    onoff = JSON.parse(localStorage.getItem('onoff') || '{}');
    onoff[cat] = !!isOn;
  };
  getLocal = function(key, expectFormat) {
    switch (expectFormat) {
      case 'object':
      case 'o':
        return JSON.parse(localStorage.getItem(key) || '{}');
      case 'array':
      case 'a':
        return JSON.parse(localStorage.getItem(key) || '[]');
      default:
        return localStorage.getItem(key);
    }
  };
  return {
    isValueInObj: isValueInObj,
    isIp: isValidIp,
    isHost: isValidHost,
    isPath: isValidPath,
    getLocal: getLocal,
    getSwitch: getSwitch,
    setSwitch: setSwitch
  };
});


//# sourceMappingURL=utils.js.map
