// Generated by CoffeeScript 1.10.0
define(function(require) {
  var collection, dataMaintain, getNowDate, iconStyles, init, utils;
  collection = require('common/js/collection');
  dataMaintain = require('js/data-maintain');
  utils = require('common/js/utils');
  iconStyles = ['colored', 'grey'];
  init = function() {
    var iconStyle;
    iconStyle = collection.getConfig('iconStyle');
    if (-1 === iconStyles.indexOf(iconStyle)) {
      iconStyle = 'colored';
    }
    $("#ext-iconstyle-switch input[value='" + iconStyle + "']").prop('checked', true);
  };
  $('#ext-iconstyle-switch input:radio').on('change', function(e) {
    collection.setConfig('iconStyle', this.value);
  });
  getNowDate = function() {
    var now;
    now = new Date;
    return now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate();
  };
  $('#backup-ext-data').on('click', function() {
    var extData;
    extData = dataMaintain.getExtData();
    return dataMaintain.save2File(extData, "my-webrequest-" + (getNowDate()) + ".json");
  });
  $('#restore-ext-data').on('change', function(e) {
    var files;
    files = e.target.files;
    if (files.length) {
      dialog({
        title: utils.i18n('opt_errtip_gtitle'),
        content: 'This will override all setting you have',
        okValue: utils.i18n('ok_btn'),
        cancelValue: utils.i18n('cancel_btn'),
        cancel: function() {},
        ok: function() {
          collection.setRestoreStatus(true);
          return dataMaintain.readFile(files[0], function(content) {
            if (!dataMaintain.restoreExtData(content)) {
              collection.setRestoreStatus(false);
              alert('format error!');
              return;
            }
            return setTimeout(function() {
              return init();
            }, 300);
          }, function(msg) {
            return alert(msg);
          });
        }
      }).showModal();
    }
    return this.value = '';
  });
  return {
    init: init
  };
});


//# sourceMappingURL=ext-settings-page.js.map
