// Generated by CoffeeScript 1.9.2
define(function(require) {
  var addRule, collection, initSection, isPageCat, isUnionCat, pageIds, removeRule, resetSectionCtrlsState, tpl, utils;
  collection = require('common/collection');
  utils = require('common/utils');
  tpl = require('js/tpl');
  pageIds = $('#nav>li>a').map(function() {
    var href;
    href = this.getAttribute('href');
    if (href[0] === '#') {
      return href.replace('#', '');
    }
  }).get();
  isPageCat = function(cat) {
    return ~pageIds.indexOf((cat || '').replace('#', ''));
  };
  isUnionCat = function(cat) {
    return ~['block', 'hotlink', 'hsts', 'log'].indexOf((cat || '').replace('#', ''));
  };

  /**
   * toggle enable state of section of cat( category )
   * @param  {String} cat
   */
  resetSectionCtrlsState = function(cat) {
    var $switch, $tbody, $thead, ruleNum, switchEnabled;
    $thead = $('#request-settings thead');
    $tbody = $('#request-settings tbody');
    ruleNum = $tbody.find('tr:not([nodata])').length;
    $switch = $('#request-settings .switch-input');
    switchEnabled = utils.getSwitch(cat);
    $switch.prop({
      'checked': switchEnabled && !!ruleNum,
      'disabled': !ruleNum
    });
    $('#request-settings .enable-tip').prop('hidden', !!ruleNum);
    $thead.find('input, button').prop('disabled', !ruleNum);
    $('#request-settings .rule-cunt-num').text(ruleNum);
    $thead.find('input').prop('checked', ruleNum && ruleNum === $tbody.find('tr input:checked').length);
  };

  /**
   * init section of cat( category )
   * @param  {[type]} cat [description]
   * @return {[type]}     [description]
   */
  initSection = function(cat) {
    var hasRule, html, isHsts, rules;
    rules = collection.getRules(cat);
    rules.reverse();
    $('#fun-name').text($("#nav a[href^=#" + cat + "]").text());
    $('#fun-desc').text(chrome.i18n.getMessage("opt_" + cat + "_desc"));
    hasRule = !!rules.length;
    isHsts = cat === 'hsts';
    if (hasRule) {
      html = tpl.rulesTpl(rules);
    } else {
      html = tpl.nodataTpl;
      utils.setSwitch(cat, false);
    }
    $('#request-settings tbody').html(html);
    resetSectionCtrlsState(cat);
    $('#protocol').val(isHsts ? 'http' : '*').attr('disabled', isHsts);
  };
  addRule = function(cat, rule) {
    var $tbody, $tr, noRule;
    $tbody = $('#request-settings tbody');
    $tr = $(utils.rulesTpl([rule]));
    $tr.addClass('new-item');
    noRule = !$tbody.find('tr:not([nodata])').length;
    $tbody[noRule ? 'html' : 'prepend']($tr);
    $('.rule-field input').val('');
    $('#host').focus();
    collection.saveRule(cat);
    resetSectionCtrlsState(cat);
    setTimeout(function() {
      $tr.removeClass('new-item');
    }, 600);
  };
  removeRule = function(cat, $trs) {
    var $tbody, isRemoveAll, rules;
    $tbody = $('#request-settings tbody');
    if (!$trs) {
      $trs = $tbody.find('input:checked').parents('tr');
    }
    if (!$tr.length) {
      return;
    }
    rules = $trs.find('input').map(function() {
      return this.value;
    }).get();
    isRemoveAll = rules.length === $tbody.find('tr').length;
    utils.removeRule(cat, rules);
    $tr.addClass('fadeOutDown');
    setTimeout(function() {
      $tr.remove();
      if (isRemoveAll) {
        $tbody.html(tpl.nodataTpl);
      }
      resetSectionCtrlsState(cat);
    }, 200);
  };
  $(document).on('click', 'a[href^=#]', function(e) {
    var $navLink, $unionSec, cat;
    cat = $(this).attr('href').replace('#', '');
    if (!isPageCat(cat)) {
      return;
    }
    $navLink = $("#nav a[href^=#" + cat + "]").parent();
    if ($navLink.hasClass('active')) {
      return;
    }
    location.hash = cat;
    $navLink.siblings().removeClass('active');
    $navLink.addClass('active');
    $unionSec = $('#request-settings');
    $unionSec.removeClass('active');
    if (isUnionCat(cat)) {
      initSection(cat);
      setTimeout(function() {
        $unionSec.addClass('active');
      }, 50);
    }
  });
  (function() {
    var cat;
    cat = location.hash.replace('#', '');
    if (!isPageCat(cat)) {
      cat = 'block';
    }
    console.log(cat);
    $("#nav a[href^=#" + cat + "]").click();
  })();
});


//# sourceMappingURL=main.js.map
