// Generated by CoffeeScript 1.8.0
$(function($) {
  var QRAPIHOST, QRAPIURL, TABNODATATR, addRule, deleteRules, dialogOKCB, getCustomFavorGsearch, getObjValues, getVcardString, hash, hideDialog, hideInputDialog, hostReg, initRequestSection, initSettings, initUtility, ipReg, isValueInObj, pathReg, rules, showDialog, showTip, updateFavorGsearchOnview;
  hash = location.hash.replace('#', '') || 'block';
  rules = {};
  dialogOKCB = null;
  TABNODATATR = "<tr nodata><td colspan='3' class='align-center'>" + (chrome.i18n.getMessage('opt_no_rules')) + "</td></tr>";
  QRAPIHOST = 'api.qrserver.com';
  QRAPIURL = 'http://api.qrserver.com/v1/create-qr-code/?size=200x200&data=%s';
  ipReg = /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/;
  hostReg = /^(\*((\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*\.[a-z]{2,4})?|([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,4})$/;
  pathReg = /^[a-z0-9-_\+=&%@!\.,\*\?\|~\/]+$/i;
  if (['block', 'hsts', 'hotlink', 'log', 'qrcode', 'help', 'utility', 'ext-settings'].indexOf(hash) === -1) {
    hash = 'block';
  }
  (function(rules) {
    var arr, i, k, key, _i, _len;
    rules.block = {};
    rules.hotlink = {};
    rules.log = {};
    rules.hsts = {};
    for (key in rules) {
      arr = JSON.parse(localStorage[key] || '[]');
      rules[key].max = arr.length;
      for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
        k = arr[i];
        rules[key][i] = k;
      }
    }
  })(rules);
  initRequestSection = function(secId) {
    var $enable, $firstInput, $protocol, $tbody, cunt, delStr, key, onoff, ruleObj, str, val;
    str = '';
    $tbody = $('#request-settings tbody');
    $enable = $('#request-settings .switch-input');
    delStr = '<td class="delete">' + chrome.i18n.getMessage('opt_delete_text') + '</td>';
    $protocol = $('#protocol');
    $firstInput = $('#host');
    onoff = JSON.parse(localStorage.onoff || '{}');
    cunt = 0;
    setTimeout(function(e) {
      return $firstInput.focus();
    }, 200);
    ruleObj = rules[secId] || {};
    for (key in ruleObj) {
      val = ruleObj[key];
      if (!isNaN(key) && ruleObj.hasOwnProperty(key)) {
        ++cunt;
        str += '<tr>';
        str += "<td><input type='checkbox' value='" + key + "'> </td>";
        str += "<td title='" + val + "'>" + val + "</td>";
        str += delStr;
        str += '</tr>';
      }
    }
    $('#request-settings .rule-cunt-num').text(cunt);
    if (!str) {
      $enable.prop('checked', false).trigger('change');
      $enable.prop('disabled', true);
      $('#request-settings .enable-tip').prop('hidden', false);
      $tbody.parent().find('thead input,thead button').prop('disabled', true);
      str = TABNODATATR;
    } else {
      $enable.prop('checked', !!onoff[secId]);
      $enable.prop('disabled', false);
      $('#request-settings .enable-tip').prop('hidden', true);
      $tbody.parent().find('thead input,thead button').prop('disabled', false);
    }
    $tbody.parent().find('thead input').prop('checked', false);
    if (secId === 'hsts') {
      $protocol.val('http').attr('disabled', true);
    } else {
      $protocol.val('*').attr('disabled', false);
    }
    $tbody.html(str);
  };
  addRule = function(rule, type, $tbody) {
    var $tr, ruleObj, str;
    ruleObj = rules[type];
    str = '';
    $tr = $('<tr />');
    ++ruleObj.max;
    ruleObj[ruleObj.max] = rule;
    $tr.addClass('new-item');
    str += "<td><input type='checkbox' value='" + ruleObj.max + "'> </td>";
    str += "<td title='" + rule + "'>" + rule + "</td>";
    str += "<td class='delete'>" + (chrome.i18n.getMessage('opt_delete_text')) + "</td>";
    $tr.html(str);
    if (!$tbody.find('tr').length || $tbody.find('tr[nodata]').length) {
      $tbody.find('tr').remove();
      $('#request-settings .switch-input').prop('disabled', false);
      $tbody.parent().find('thead input,thead button').prop('disabled', false);
      $('#request-settings .enable-tip').prop('hidden', true);
    }
    localStorage[type] = JSON.stringify(getObjValues(ruleObj));
    $tbody.prepend($tr);
    $('#request-settings .rule-cunt-num').text($tbody.find('tr').length);
    $('.rule-field input').val('');
    $('#host').focus();
    return setTimeout(function() {
      return $tr.removeClass('new-item');
    }, 600);
  };
  deleteRules = function(secId) {
    var $checkTrs, $enable, $tbody, keys, len, ruleObj, trLen;
    $tbody = $('#request-settings tbody');
    $checkTrs = $tbody.find('tr input:checked');
    $enable = $('#request-settings .switch-input');
    keys = $checkTrs.map(function() {
      return this.value;
    }).get();
    ruleObj = rules[secId];
    len = keys.length;
    trLen = $tbody.find('tr').length;
    if (len) {
      if (len === trLen) {
        $tbody.html(TABNODATATR);
        $tbody.parent().find('thead input').prop('checked', false);
        $tbody.parent().find('thead input,thead button').prop('disabled', true);
        $enable.prop('checked', false).trigger('change');
        $enable.prop('disabled', true);
        $('#request-settings .enable-tip').prop('hidden', false);
        rules[secId] = {};
        ruleObj = {};
      } else {
        $checkTrs.map(function() {
          return $(this).parents('tr').remove();
        });
        while (len--) {
          delete ruleObj[keys[len]];
        }
      }
      $('#request-settings .rule-cunt-num').text(trLen - len);
      localStorage[secId] = JSON.stringify(getObjValues(ruleObj));
      if (!$tbody.find('tr').length) {
        return $tbody.html(TABNODATATR);
      }
    }
  };
  getObjValues = function(obj) {
    var arr, k;
    arr = [];
    for (k in obj) {
      if (!isNaN(k) && obj.hasOwnProperty(k)) {
        arr.push(obj[k]);
      }
    }
    return arr.reverse();
  };
  getVcardString = function() {
    var str;
    str = [];
    $('#tab-vcard').find('input,textarea').map(function(i, el) {
      console.log(el);
      if (el.value !== '') {
        return str.push("" + el.name + ":" + el.value);
      }
    });
    return str.join(';');
  };
  isValueInObj = function(obj, value) {
    var k, v;
    for (k in obj) {
      v = obj[k];
      if (obj.hasOwnProperty(k) && v === value) {
        return true;
      }
    }
    return false;
  };
  hideDialog = function() {
    var $overlayWrapper;
    $overlayWrapper = $('#confirm-dialog-wrapper');
    $overlayWrapper.removeClass('fadeInDown');
    $overlayWrapper.addClass('fadeOutUp');
    return setTimeout(function() {
      $overlayWrapper.removeClass('fadeOutUp');
      $overlayWrapper.prop('hidden', true);
      return $(document.body).removeClass('ovHidden');
    }, 220);
  };
  showTip = function(el, msg) {
    var $el, $msg, $tooltip, pos;
    $el = $(el);
    $tooltip = $('#tooltip');
    $msg = $('#tooltip-msg');
    pos = $el.offset();
    $msg.html(msg);
    pos.top += $el.height() + 15;
    pos.left += $el.width() / 2 - $tooltip.width() / 2;
    $tooltip.css({
      top: pos.top + 'px',
      left: pos.left + 'px'
    });
    setTimeout(function() {
      $tooltip.addClass('show');
    }, 10);
    $el.focus().select();
  };
  showDialog = function(config) {
    var $dlgCancelBtn, $dlgContent, $dlgOKBtn, $dlgTitle, $overlayWrapper;
    $overlayWrapper = $('#confirm-dialog-wrapper');
    $dlgTitle = $('#dialog-title');
    $dlgContent = $('#dialog-content');
    $dlgOKBtn = $('#dialog-ok-btn');
    $dlgCancelBtn = $('#dialog-cancel-btn');
    config = config || {};
    $(document.body).addClass('ovHidden');
    $overlayWrapper.prop('hidden', false);
    $overlayWrapper.addClass('fadeInDown');
    $dlgTitle.text(config.title || 'No title');
    $dlgContent.html(config.content || 'No content');
    $dlgOKBtn.prop('hidden', !!config.hideOK);
    $dlgCancelBtn.prop('hidden', !!config.hideCancel);
    if ($.isFunction(config.callback)) {
      dialogOKCB = config.callback;
      dialogOKCB.args = config.cbargs ? config.cbargs : [];
      $dlgOKBtn.removeClass('cancel');
    } else {
      dialogOKCB = null;
    }
    if ($.isNumeric(config.timeout) && config.timeout > 0) {
      setTimeout(hideDialog, config.timeout);
    }
    if (config.focusOnOK) {
      return $dlgOKBtn.focus();
    } else {
      return $dlgCancelBtn.focus();
    }
  };
  getCustomFavorGsearch = function() {
    var host;
    host = localStorage.gsearch || '';
    if (host) {
      host = JSON.parse(host)[0];
    }
    host = host || '';
    return host.slice(4, -5);
  };
  updateFavorGsearchOnview = function(host) {
    $('#custom-favor-gsearch').text(host);
    $('#custom-favor-gsearch-wrapper').prop('hidden', !host);
  };
  initUtility = function() {
    var onoff;
    onoff = JSON.parse(localStorage.onoff || '{}');
    $('#switch-google').prop('checked', !!onoff.gsearch);
    $('#switch-gstatic').prop('checked', !!onoff.gstatic);
    updateFavorGsearchOnview(getCustomFavorGsearch());
  };
  initSettings = function() {
    var extConfig, iconStyle;
    extConfig = JSON.parse(localStorage.getItem('config') || '{}');
    iconStyle = 'colored';
    if (extConfig.iconStyle === 'grey') {
      iconStyle = 'grey';
    }
    $("#ext-iconstyle-switch input[value='" + iconStyle + "']").prop('checked', true);
  };
  $(document).on('click', 'a[href^=#]', function(e) {
    var $navlink, $requestSec, targetId;
    targetId = $(this).attr('href').replace('#', '');
    $navlink = $("#nav a[href=#" + targetId + "]").parent();
    $requestSec = $('#request-settings');
    if ($navlink.length) {
      if ($navlink.hasClass('active')) {
        return;
      }
      $('#nav li').removeClass('active');
      $navlink.addClass('active');
      location.hash = targetId;
      switch (targetId) {
        case 'block':
        case 'hsts':
        case 'hotlink':
        case 'log':
          $requestSec.attr('data-id', targetId);
          $requestSec.removeClass('active');
          initRequestSection(targetId);
          $('#fun-name').text($navlink.text());
          $('#fun-desc').text(chrome.i18n.getMessage("opt_" + targetId + "_desc"));
          setTimeout(function() {
            $requestSec.addClass('active');
          }, 100);
          break;
        case 'qrcode':
          $requestSec.removeClass('active');
          setTimeout(function() {
            return $('#qrcode .tab-pane.active .input:first').focus();
          }, 0);
          break;
        case 'utility':
          $requestSec.removeClass('active');
          initUtility();
          break;
        case 'ext-settings':
          $requestSec.removeClass('active');
          initSettings();
          break;
        default:
          $requestSec.removeClass('active');
      }
    }
  });
  $("#nav a[href=#" + hash + "]").click();
  $('#request-settings .switch-input').on('change', function(e) {
    var enabled, onoff, secId;
    secId = $('#request-settings').attr('data-id');
    enabled = this.checked;
    onoff = JSON.parse(localStorage.onoff || '{}');
    onoff[secId] = enabled;
    localStorage.onoff = JSON.stringify(onoff);
  });
  $('#ext-iconstyle-switch input:radio').on('change', function(e) {
    var extConfig;
    extConfig = JSON.parse(localStorage.getItem('config') || '{}');
    extConfig.iconStyle = this.value;
    localStorage.setItem('config', JSON.stringify(extConfig));
  });
  document.getElementById('qrimg').onerror = function(e) {
    this.setAttribute('hidden', true);
    return showDialog({
      title: chrome.i18n.getMessage('opt_errtip_gtitle'),
      content: chrome.i18n.getMessage('opt_errtip_gcontent'),
      hideCancel: true,
      focusOnOK: true
    });
  };
  $('#host').on('keyup', function(e) {
    var $path;
    if (e.keyCode === 13) {
      $path = $('#path');
      if ($path.val() === '') {
        return $path.focus();
      } else {
        return $(this).parents('.rule-field').find('.add-rule').click();
      }
    }
  });
  $('#host').on('paste', function(e) {
    var arr, i, tmp, url;
    url = e.originalEvent.clipboardData.getData('text/plain');
    if (url !== '') {
      i = url.indexOf('://');
      if (~i) {
        if (!i) {
          return true;
        }
        arr = url.split('://');
        if (arr.length !== 2) {
          return true;
        }
        tmp = arr[0].trim();
        if (['*', 'http', 'https'].indexOf(tmp) === -1) {
          return true;
        }
        if (!$('#protocol').prop('disabled')) {
          $('#protocol').val(tmp);
        }
        tmp = arr[1].trim();
        arr = tmp.split('/');
        $('#host').val(arr[0]);
        if (arr[1] !== void 0) {
          arr.shift();
          $('#path').val(arr.join('/').split('#').shift());
        }
        arr = null;
        return false;
      } else {
        arr = url.split('/');
        $('#host').val(arr[0]);
        if (arr[1] !== void 0) {
          arr.shift();
          $('#path').val(arr.join('/').split('#').shift());
        }
        arr = null;
        return false;
      }
    }
    return true;
  });
  $('#path').on('keyup', function(e) {
    if (e.keyCode === 13) {
      $(this).parents('.rule-field').find('.add-rule').click();
      return false;
    }
  });
  $('.rule-field').on('click', '.add-rule', function(e) {
    var $host, $path, $protocol, $tbody, data, errorContent, rule, ruleObj, secId, str;
    secId = $('#request-settings').attr('data-id');
    $protocol = $('#protocol');
    $host = $("#host");
    $path = $("#path");
    data = {
      protocol: $protocol.val().trim(),
      host: $host.val().trim().toLowerCase(),
      path: $path.val().trim()
    };
    ruleObj = rules[secId];
    $tbody = $('#request-settings tbody');
    if (['*', 'http', 'https'].indexOf(data.protocol) === -1) {
      showTip($protocol, chrome.i18n.getMessage('opt_errtip_protocol'));
      return false;
    }
    if (!data.host || (!hostReg.test(data.host) && !ipReg.test(data.host))) {
      showTip($host, chrome.i18n.getMessage('opt_errtip_host'));
      return false;
    }
    if (data.path === '') {
      data.path = '*';
    }
    if (!data.path || !pathReg.test(data.path)) {
      showTip($path, chrome.i18n.getMessage('opt_errtip_path'));
      return false;
    }
    rule = "" + data.protocol + "://" + data.host + "/" + data.path;
    if (rule.length > 500) {
      showTip($host, chrome.i18n.getMessage('opt_errtip_rulelong'));
      return false;
    }
    if (isValueInObj(ruleObj, rule)) {
      showTip($host, chrome.i18n.getMessage('opt_errtip_duplicate'));
      return false;
    }
    if (data.host === '*') {
      if (['block', 'hsts'].indexOf(secId) !== -1) {
        errorContent = 'opt_errdlg_cstarqr';
      } else {
        errorContent = 'opt_errdlg_cstar';
      }
    } else {
      str = data.host.replace(/\./g, '\\.').replace('*', '.*');
      if (['block'].indexOf(secId) !== -1 && (new RegExp('^' + str + '$')).test(QRAPIHOST)) {
        errorContent = 'opt_errdlg_cqr';
      }
    }
    if (errorContent) {
      showDialog({
        title: chrome.i18n.getMessage('opt_errdlg_title'),
        content: chrome.i18n.getMessage(errorContent),
        callback: addRule,
        cbargs: [rule, secId, $tbody]
      });
    } else {
      return addRule(rule, secId, $tbody);
    }
  });
  $('.rules .multi-delete').on('click', function(e) {
    var len, secId;
    secId = $('#request-settings').attr('data-id');
    len = $(this).parents('table').find('tbody input:checked').length;
    if (len) {
      showDialog({
        title: chrome.i18n.getMessage('opt_deldlg_title'),
        content: chrome.i18n.getMessage('opt_deldlg_content').replace('xx', len),
        callback: deleteRules,
        cbargs: [secId]
      });
    } else {
      showTip(this, chrome.i18n.getMessage('opt_errtip_nochose'));
      return false;
    }
  });
  $('.rules tbody').on('click', '.delete', function(e) {
    var $tr, key, secId;
    $tr = $(this).parent();
    secId = $('#request-settings').attr('data-id');
    key = $tr.find('input').val();
    $tr.addClass('fadeOutDown');
    if (rules[secId][key]) {
      delete rules[secId][key];
      localStorage[secId] = JSON.stringify(getObjValues(rules[secId]));
    }
    return setTimeout(function() {
      var $enable, $tbody, trCunt;
      $tbody = $tr.parent();
      $enable = $('#request-settings .switch-input');
      $tr.remove();
      $('#request-settings .rule-cunt-num').text($tbody.find('tr').length);
      trCunt = $tbody.find('tr').length;
      if (!trCunt) {
        $tbody.html(TABNODATATR);
        $enable.prop('checked', false).trigger('change');
        $enable.prop('disable', true);
        $('#request-settings .enable-tip').prop('hidden', false);
        return $tbody.parent().find('thead input,thead button').prop('disabled', true);
      } else if (trCunt === $tbody.find('input:checked').length) {
        return $tbody.parent().find('thead input[type="checkbox"]').prop('checked', true);
      }
    }, 220);
  });
  $('.rules thead input[type="checkbox"]').on('click', function(e) {
    var $table, $this, checked;
    $this = $(this);
    checked = $this.prop('checked');
    $table = $this.parents('.rules');
    $table.find('tbody input[type="checkbox"]').prop('checked', checked);
    if (checked) {
      return $table.find('tbody tr').addClass('checked');
    } else {
      return $table.find('tbody tr').removeClass('checked');
    }
  });
  $('.rules tbody').on('click', 'input[type="checkbox"]', function(e) {
    var $checkAll, $tbody, $this, $tr;
    $this = $(this);
    $tr = $this.parents('tr');
    $tbody = $this.parents('tbody');
    $checkAll = $this.parents('.rules').find('thead input[type="checkbox"]');
    if ($this.prop('checked')) {
      $tr.addClass('checked');
      if ($tbody.find('tr').length === $tbody.find('input:checked').length) {
        return $checkAll.prop('checked', true);
      }
    } else {
      $tr.removeClass('checked');
      return $checkAll.prop('checked', false);
    }
  });
  $(document).on('keydown', function(e) {
    var $overlay;
    if (e.keyCode === 27) {
      $overlay = $('.overlay-wrapper:visible');
      if ($overlay.length) {
        $overlay.find('.cancel').click();
      }
    }
  });
  $(document).on('click keyup', function(e) {
    var $tooltip;
    $tooltip = $('#tooltip');
    if ($tooltip.hasClass('show')) {
      return $tooltip.removeClass('show');
    }
  });
  $('.dialog').on('click', '.cancel', hideDialog);
  $('#dialog-ok-btn').on('click', function(e) {
    hideDialog();
    if (dialogOKCB) {
      dialogOKCB.apply(null, dialogOKCB.args);
      dialogOKCB.args = null;
      return dialogOKCB = null;
    }
  });
  $('.nav-tabs li').on('click', function(e) {
    var $tabContent, $tabNav, $target, $this, target;
    $this = $(this);
    target = $this.attr('data-target');
    $tabNav = $(this).parent();
    $tabNav.find('li.active').removeClass('active');
    $this.addClass('active');
    $tabContent = $tabNav.parent().find('.tab-content');
    $tabContent.find('.tab-pane.active').removeClass('active in');
    $target = $tabContent.find(".tab-pane#tab-" + target);
    $target.addClass('active');
    return setTimeout(function() {
      $target.addClass('in');
      return $target.find('.input:first').focus();
    }, 0);
  });
  $('.tab-content').on('keydown', '.input', function(e) {
    if ((e.ctrlKey || e.metaKey) && e.keyCode === 13) {
      $(this).parents('.tab-pane').find('.make-qrcode').click();
      return false;
    }
  });
  $('.tab-content').on('click', '.make-qrcode', function(e) {
    var $errorTip, $qrimg, $tab, $this, imgSrc, str, type;
    $this = $(this);
    $tab = $this.parents('.tab-pane');
    $errorTip = $this.prev();
    $qrimg = $('#qrimg');
    type = $tab.attr('data-type');
    str = '';
    switch (type) {
      case 'text':
        str = $('#s-text').val().trim();
        break;
      case 'vcard':
        str = getVcardString();
        if (str) {
          str = 'MECARD:' + str + ';;';
        }
        break;
      case 'msg':
        if ($('#s-tel').val().trim() || $('#s-msg').val().trim()) {
          str = 'smsto:' + $('#s-tel').val().trim() + ':' + $('#s-msg').val().trim();
        }
    }
    if (str !== '') {
      str = encodeURIComponent(str);
      if (str.length > 1900) {
        $errorTip.text(chrome.i18n.getMessage('opt_qrtip_ovfl'));
        $errorTip.prop('hidden', false);
        setTimeout(function(e) {
          return $errorTip.prop('hidden', true);
        }, 3000);
        return;
      }
      imgSrc = QRAPIURL.replace('%s', str);
      $('<img/>').on('load', function() {
        $qrimg.removeClass('show');
        $qrimg.attr('src', imgSrc);
        $(this).remove();
        return setTimeout(function() {
          $qrimg.addClass('show');
        }, 0);
      }).attr('src', imgSrc);
    } else {
      $errorTip.text(chrome.i18n.getMessage('opt_qrtip_notext'));
      $errorTip.prop('hidden', false);
      $tab.find('.input:first').focus();
      setTimeout(function(e) {
        return $errorTip.prop('hidden', true);
      }, 3000);
      return;
    }
    if ($this.is('textarea')) {
      $tab = $this.next('.letter-cunt');
      if ($tab.length) {
        $tab.text(str.length + '/300');
      }
    }
  });
  $('.letter-cunt-wrapper').on('keyup', 'textarea', function(e) {
    $(this).next().text(this.value.trim().length + '/300');
  });
  $('#switch-google').on('change', function() {
    var onoff;
    onoff = JSON.parse(localStorage.onoff || '{}');
    if (this.checked) {
      onoff['gsearch'] = true;
    } else {
      onoff['gsearch'] = false;
    }
    localStorage.onoff = JSON.stringify(onoff);
    console.log('google changed');
  });
  $('#gsearch-rule-switch').on('click', '.js-add-favor-gsearch', function() {
    var $wrapper;
    $('#preferred-google').val(getCustomFavorGsearch());
    $wrapper = $('#input-dialog-wrapper');
    $(document.body).addClass('ovHidden');
    $wrapper.prop('hidden', false);
    $wrapper.addClass('fadeInDown');
    setTimeout(function() {
      $('#preferred-google').focus();
    }, 210);
  });
  $('#preferred-google').on('keyup', function(e) {
    if (e.keyCode === 13) {
      $('#input-dialog-wrapper .js-btn-ok').click();
    }
  });
  hideInputDialog = function() {
    var $overlayWrapper;
    $overlayWrapper = $('#input-dialog-wrapper');
    $overlayWrapper.removeClass('fadeInDown');
    $overlayWrapper.addClass('fadeOutUp');
    setTimeout(function() {
      $overlayWrapper.removeClass('fadeOutUp');
      $overlayWrapper.prop('hidden', true);
      return $(document.body).removeClass('ovHidden');
    }, 220);
  };
  $('#input-dialog-wrapper .cancel').on('click', hideInputDialog);
  $('#input-dialog-wrapper .js-btn-ok').on('click', function() {
    var arr, host, i;
    host = $.trim($('#preferred-google').val());
    if (host === '') {
      localStorage.gsearch = JSON.stringify([]);
      updateFavorGsearchOnview('');
    } else {
      host = host.toLowerCase();
      i = host.indexOf('\/\/');
      if (i !== -1) {
        host = host.substr(i + 2);
      }
      i = host.indexOf('\/');
      if (i !== -1) {
        host = host.substr(0, i);
      }
      if (ipReg.test(host) || hostReg.test(host)) {
        arr = host.split('.');
        if (arr.length === 2 && arr[0] === 'google') {
          host = "www." + host;
        }
        updateFavorGsearchOnview(host);
        host = "*://" + host + "/url*";
        localStorage.gsearch = JSON.stringify([host]);
      } else {
        showTip($('#preferred-google'), chrome.i18n.getMessage('opt_errtip_host'));
        return;
      }
    }
    hideInputDialog();
  });
  $('#switch-gstatic').on('change', function() {
    var onoff;
    onoff = JSON.parse(localStorage.onoff || '{}');
    if (this.checked) {
      onoff['gstatic'] = true;
    } else {
      onoff['gstatic'] = false;
    }
    localStorage.onoff = JSON.stringify(onoff);
    console.log('google changed');
  });
});


//# sourceMappingURL=opt.js.map
